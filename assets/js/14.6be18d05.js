(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{368:function(t,e,a){"use strict";a.r(e);var s=a(42),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"smart-object-states"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#smart-object-states"}},[t._v("#")]),t._v(" Smart Object States")]),t._v(" "),a("p",[a("strong",[t._v("Object States")]),t._v(" are a feature of Captivate that allow a single object to have multiple appearances. For example, a "),a("strong",[t._v("Shape Button's")]),t._v(" rollover and down appearance are handled by giving it a rollover and down state which can be configured to alter the button's appearance in response to the leaner interacting with the button. Captivate developers would normally use Captivate's default "),a("strong",[t._v("Change State")]),t._v(" action to change an object's appearance.")]),t._v(" "),a("p",[a("strong",[t._v("CpExtra Smart States")]),t._v(" can "),a("em",[t._v("automatically")]),t._v(" change an object's state in reaction to "),a("strong",[t._v("User Variable")]),t._v(" values. This makes interaction design in Captivate cleaner because you don't need to employ Advanced Actions to achieve changes of object states.")]),t._v(" "),a("p",[t._v("The following objects support states:")]),t._v(" "),a("ul",[a("li",[t._v("Shapes")]),t._v(" "),a("li",[t._v("Captions")]),t._v(" "),a("li",[t._v("Highlight Boxes")]),t._v(" "),a("li",[t._v("Images")]),t._v(" "),a("li",[t._v("SVGs")])]),t._v(" "),a("p",[t._v("This video will give you a quick introduction to smart states:")]),t._v(" "),a("iframe",{attrs:{width:"560",height:"315",src:"https://www.youtube.com/embed/ZOveZ5YgM0o",frameborder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""}}),t._v(" "),a("h2",{attrs:{id:"creating-a-new-state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-new-state"}},[t._v("#")]),t._v(" Creating a New State")]),t._v(" "),a("ol",[a("li",[t._v("Select the object that you want to have a smart state.")]),t._v(" "),a("li",[t._v("In the "),a("strong",[t._v("Properties")]),t._v(" panel, there are two ways to initiate creation of a new state. One way is to click the plus button beside the default state name shown.  The other way is to click the "),a("strong",[t._v("State View")]),t._v(" button to open the "),a("strong",[t._v("Object State")]),t._v(" panel (usually located in the same area as the "),a("strong",[t._v("FilmStrip")]),t._v(" or "),a("strong",[t._v("Master Slide")]),t._v(" panels) and then click the plus button beside "),a("strong",[t._v("New State")]),t._v(". Either method allows you to create a new object state.")]),t._v(" "),a("li",[t._v("Think carefully about the "),a("strong",[t._v("name")]),t._v(" you enter for the new object state, because this name will be used to tell CpExtra this is a smart state and under what circumstances it should display. (We will discuss these names below)")]),t._v(" "),a("li",[t._v("After entering the special state name, click OK to save the new object state.")])]),t._v(" "),a("p",[t._v("By default, this new state will be selected and any changes made in the "),a("strong",[t._v("Properties")]),t._v(" panel will be applied to that state.")]),t._v(" "),a("p",[t._v("States can also be re-named using this same dialog box if you need to change an existing state into a smart state, or to alter the name of a smart state (if it proves to be incorrect or conflict with another name).")]),t._v(" "),a("p",[t._v("To do this you need to enter the object's state view by selecting the object and tapping the "),a("strong",[t._v("state view")]),t._v(" button.")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/img/smart-state-state-view.png"),alt:"state view"}}),t._v(" "),a("h2",{attrs:{id:"defining-a-smart-state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#defining-a-smart-state"}},[t._v("#")]),t._v(" Defining a Smart State")]),t._v(" "),a("p",[t._v("CpExtra will treat a state as a smart state if "),a("strong",[t._v("the state's name starts with: x_")])]),t._v(" "),a("p",[t._v("After "),a("strong",[t._v("x_")]),t._v(" we will write the condition under which this state should appear.")]),t._v(" "),a("h3",{attrs:{id:"mouse-smart-states"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mouse-smart-states"}},[t._v("#")]),t._v(" Mouse Smart States")]),t._v(" "),a("p",[t._v("Smart states can automatically appear in response to mouse events.")]),t._v(" "),a("ul",[a("li",[t._v("A state will appear on "),a("strong",[t._v("rollover")]),t._v(" if it's named: "),a("strong",[t._v("x_rollover")])]),t._v(" "),a("li",[t._v("A state will appear on "),a("strong",[t._v("mouse down")]),t._v(" if it's named: "),a("strong",[t._v("x_down")])])]),t._v(" "),a("h3",{attrs:{id:"variable-smart-states"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#variable-smart-states"}},[t._v("#")]),t._v(" Variable Smart States")]),t._v(" "),a("p",[t._v("Smart states can change based on on a variable's value.")]),t._v(" "),a("h4",{attrs:{id:"when-a-variable-equals-a-certain-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#when-a-variable-equals-a-certain-value"}},[t._v("#")]),t._v(" When a variable equals a certain value")]),t._v(" "),a("p",[t._v("Name the state according to this formula: x_<variable>_<value>")]),t._v(" "),a("p",[t._v("Let's say you have a variable named "),a("strong",[t._v("color")]),t._v(" which will sometimes equal "),a("strong",[t._v("red")]),t._v(", or "),a("strong",[t._v("green")]),t._v(", or "),a("strong",[t._v("blue")]),t._v(". You can make a different state appear in response to these three values by naming the state:")]),t._v(" "),a("ul",[a("li",[t._v("x_color_red")]),t._v(" "),a("li",[t._v("x_color_green")]),t._v(" "),a("li",[t._v("x_color_blue")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("True shorthand")]),t._v(" "),a("p",[t._v("Most often you just want to see if a variable equals "),a("strong",[t._v("true")]),t._v(". If you wanted a state to appear when "),a("strong",[t._v("MyVar")]),t._v(" equals "),a("strong",[t._v("true")]),t._v(" you could name it:")]),t._v(" "),a("ul",[a("li",[t._v("x_MyVar_true")])]),t._v(" "),a("p",[t._v("However, you could acheive the same behaviour by writing:")]),t._v(" "),a("ul",[a("li",[t._v("x_MyVar")])]),t._v(" "),a("p",[t._v("CpExtra picks this up as shorthand for wanting the variable to equal: "),a("strong",[t._v("true")]),t._v(".")]),t._v(" "),a("p",[t._v("CpExtra will also consider "),a("strong",[t._v("1")]),t._v(" to equal "),a("strong",[t._v("true")]),t._v(".")]),t._v(" "),a("p",[t._v("Conversely, CpExtra will consider "),a("strong",[t._v("0")]),t._v(" to equal "),a("strong",[t._v("false")]),t._v(".")])]),t._v(" "),a("h3",{attrs:{id:"when-a-variable-does-not-equal-a-certain-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#when-a-variable-does-not-equal-a-certain-value"}},[t._v("#")]),t._v(" When a variable DOES NOT equal a certain value")]),t._v(" "),a("p",[t._v("Name the state according to this formula: x_<variable>_not_<value>")]),t._v(" "),a("p",[t._v("Let's say you have a text entry box linked to the "),a("strong",[t._v("Text_Entry_Box_1")]),t._v(" variable. You want the learner to write "),a("strong",[t._v("password123")]),t._v(" into the text entry box. If they enter "),a("em",[t._v("anything other")]),t._v(" than password123, you want to display a state showing a cross. You'd name that state:")]),t._v(" "),a("ul",[a("li",[t._v("x_Text_Entry_Box_not_password123")])]),t._v(" "),a("h3",{attrs:{id:"when-a-variable-is-greater-than-or-lesser-than-a-number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#when-a-variable-is-greater-than-or-lesser-than-a-number"}},[t._v("#")]),t._v(" When a variable is greater than or lesser than a number")]),t._v(" "),a("p",[t._v("Name the state according to one of the following formulas:")]),t._v(" "),a("ul",[a("li",[t._v("x_<variable>_gt_<value> (For "),a("strong",[t._v("greater than")]),t._v(")")]),t._v(" "),a("li",[t._v("x_<variable>_lt_<value> (For "),a("strong",[t._v("lesser than")]),t._v(")")]),t._v(" "),a("li",[t._v("x_<variable>_gte_<value> (For "),a("strong",[t._v("greater than or equal to")]),t._v(")")]),t._v(" "),a("li",[t._v("x_<variable>_lte_<value> (For "),a("strong",[t._v("lesser than or equal to")]),t._v(")")])]),t._v(" "),a("p",[t._v("Let's say at the end of the quiz, you want a caption to show a different message depending on how many questions the learner got right. The caption has two states which display the following messages:")]),t._v(" "),a("ul",[a("li",[t._v("Sorry! You didn't pass.")]),t._v(" "),a("li",[t._v("Congratulations! You passed!")])]),t._v(" "),a("p",[t._v("The passing score is 5 correct answers. We can read the number of correct answers with the Captivate System Variable: "),a("strong",[t._v("cpQuizInfoTotalCorrectAnswers")])]),t._v(" "),a("p",[t._v("The 'sorry' message should appear when "),a("strong",[t._v("cpQuizInfoTotalCorrectAnswers")]),t._v(" is "),a("strong",[t._v("lesser than 5")]),t._v(". We specify that rule with the following state name: "),a("strong",[t._v("x_cpQuizInfoTotalCorrectAnswers_lt_5")])]),t._v(" "),a("p",[t._v("The 'congratulations' message should appear when "),a("strong",[t._v("cpQuizInfoTotalCorrectAnswers")]),t._v(" is "),a("strong",[t._v("5 or greater")]),t._v(". For that we need the "),a("strong",[t._v("greater than or equal to")]),t._v(" formula: "),a("strong",[t._v("x_cpQuizInfoTotalCorrectAnswers_gte_5")])]),t._v(" "),a("h3",{attrs:{id:"when-multiple-conditions-are-satisfied"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#when-multiple-conditions-are-satisfied"}},[t._v("#")]),t._v(" When multiple conditions are satisfied")]),t._v(" "),a("p",[t._v("You can mix and match the above formulas to create states that appear when multiple conditions are satisfied.")]),t._v(" "),a("h4",{attrs:{id:"multiple-variable-conditions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multiple-variable-conditions"}},[t._v("#")]),t._v(" Multiple variable conditions")]),t._v(" "),a("p",[t._v("Let's say you had a scenario about conflict resolution. You needed the learner to help "),a("strong",[t._v("Party-A")]),t._v(" and "),a("strong",[t._v("Party-B")]),t._v(" come to a compromise. If Party-A is satisfied the "),a("strong",[t._v("partyASatisfied")]),t._v(" variable will be set to "),a("strong",[t._v("true")]),t._v(". When Party-B is satisfied the "),a("strong",[t._v("partyBSatisfied")]),t._v(" variable will be set to "),a("strong",[t._v("true")]),t._v(".")]),t._v(" "),a("p",[t._v("To make a state appear when both parties are satsified you'd name it: "),a("strong",[t._v("x_partyASatisfied_true_partyBSatisfied_true")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("True shorthand")]),t._v(" "),a("p",[t._v("Due to the above mentioned true shorthand. You could also write the following state name:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("x_partyASatisfied_partyBSatisfied")])])])]),t._v(" "),a("p",[t._v("To display a state when Party-A was satsifeid but Party-B wasn't, you'd give it the name: "),a("strong",[t._v("x_partyASatisfied_true_partyBSatisfied_false")])]),t._v(" "),a("h4",{attrs:{id:"variable-conditions-and-mouse-conditions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#variable-conditions-and-mouse-conditions"}},[t._v("#")]),t._v(" Variable conditions AND mouse conditions")]),t._v(" "),a("p",[t._v("Let's say you were making a toggle shape button. When you click the button it will toggle the "),a("strong",[t._v("activated")]),t._v(" variable. The toggle action will alternate the variable between the values 1 and 0.")]),t._v(" "),a("p",[t._v("You can give the shape button the following states:")]),t._v(" "),a("ul",[a("li",[t._v("Normal")]),t._v(" "),a("li",[t._v("x_rollover")]),t._v(" "),a("li",[t._v("x_down")]),t._v(" "),a("li",[t._v("x_activated")]),t._v(" "),a("li",[t._v("x_activated_rollover")]),t._v(" "),a("li",[t._v("x_activated_down")])]),t._v(" "),a("p",[t._v("When the "),a("strong",[t._v("activated")]),t._v(" variable is set to 0...")]),t._v(" "),a("ul",[a("li",[t._v("The "),a("strong",[t._v("Normal")]),t._v(" state will appear when the mouse is not over the shape.")]),t._v(" "),a("li",[t._v("The "),a("strong",[t._v("x_rollover")]),t._v(" state will appear when the mouse is over the shape.")]),t._v(" "),a("li",[t._v("The "),a("strong",[t._v("x_down")]),t._v(" state will appear when the leaner presses down on the shape.")])]),t._v(" "),a("p",[t._v("When the "),a("strong",[t._v("activated")]),t._v(" variable is set to 1...")]),t._v(" "),a("ul",[a("li",[t._v("The "),a("strong",[t._v("x_activated")]),t._v(" state will appear instead of the "),a("strong",[t._v("Normal")]),t._v(" state.")]),t._v(" "),a("li",[t._v("The "),a("strong",[t._v("x_activated_rollover")]),t._v(" state will appear instead of the "),a("strong",[t._v("x_rollover")]),t._v(" state.")]),t._v(" "),a("li",[t._v("The "),a("strong",[t._v("x_activated_down")]),t._v(" state will appear instead of the "),a("strong",[t._v("x_down")]),t._v(" state.")])])])}),[],!1,null,null,null);e.default=r.exports}}]);